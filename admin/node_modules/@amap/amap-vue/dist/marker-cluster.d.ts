import Vue from 'vue';
export interface MarkerClusterContext {
    marker: Vue;
    cluster: Vue;
    dummy: Vue;
}
export interface MarkerClusterStyle {
    url: string;
    size: number[];
    offset?: number;
    imageOffset?: number;
    textColor?: string;
    textSize?: number;
}
declare const _default: import("vue/types/vue").ExtendedVue<Record<never, any> & {
    $context: import("./types/amap-vue").ComponentContext<AMapComponent>;
    $container: import("./types/amap-vue").MapContext;
    $target: AMapComponent;
    $map: AMap.Map_2;
    $meta: import("./types/amap-vue").AMapMeta<AMapComponent>;
} & Vue, {
    $mcc: MarkerClusterContext;
}, {
    _onDataChange(): Promise<void>;
    _renderMarkerContent(context: any, renderer: Vue, propData: any): void;
    _setMarkerOptions(context: any, getter: any, data: any): void;
    _renderMarker(context: any): void;
    _renderCluster(context: any): void;
}, unknown, {
    data: any[];
    gridSize: number;
    maxZoom: number;
    averageCenter: boolean;
    clusterByZoomChange: boolean;
    styles: MarkerClusterStyle[];
    markerOptions: Function;
    clusterOptions: Function;
}>;
export default _default;
