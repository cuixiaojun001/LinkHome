"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("../_virtual/_tslib.js"),t=require("../load-plugins.js"),r=require("./mixins.js"),a=require("../utils/amap-helpers.js"),i=require("./props.js"),n=require("./geometry.js"),u=require("./editable.js");exports.default=function(s){return r.default(n.default,u.default).extend({amapMeta:{editable:{events:["end","move","adjust","addnode","removenode","add"],loadEditor:function(){return e.__awaiter(this,void 0,void 0,(function(){return e.__generator(this,(function(e){switch(e.label){case 0:return[4,t.default("AMap."+s)];case 1:return e.sent(),[2]}}))}))},initEditor:function(t,r,a,i){return e.__awaiter(this,void 0,void 0,(function(){return e.__generator(this,(function(e){return[2,new t[s](r,a,i)]}))}))},onEdit:function(e){var t=e.target.getPath().map(a.lngLat2Array);this.$emit("update:path",t)}}},props:{path:i.defineProp({type:Array,setter:function(e,t){if(this.$props.draggable||this.$props.editable){var r=a.path2Array(e.getPath());if(a.theSamePath(r,t))return}e.setPath(t)},getter:function(e){return a.path2Array(e.getPath())},clone:!0,equals:a.theSamePath,events:["dragging","dragend"]})}})};
